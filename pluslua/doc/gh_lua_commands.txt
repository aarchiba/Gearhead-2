*******************************
***   List  of  Functions   ***
*******************************

gh_AddChatMenuItem( n , message )
	Adds an option to the conversation menu.
	*** Restricted: In general, you won't need to use this.

gh_AddMenuItem( prompt , n )
	Adds an item to the script menu.

gh_AddNAtt( gear , NA_G , NA_S , NA_V )
	Adds NA_V to the value of gear's numeric attribute NA_G,NA_S.
	May also be called as the gear:AddNAtt( NA_G , NA_S , NA_V ) method.

gh_Alert( message )
	Prints a string to the popup window.
	gh_RawAlert( message ) prints a message without formatting.	

gh_BrowseMessages( tag )
	Browses messages of a certain type. Options include "NEWS", "EMAIL",
	"RUMEMO" and "MEMO".

gh_CalculateReward( renown , percent )
	Calculate a reward value based on a given renown + percent value.

gh_CountActiveModels( team )
	Returns the number of models (mecha + characters) belonging to the
	specified team on the current map.

gh_CreatePart( full_name )
	Creates a new part from the design, STC, monster, or archetype lists.
	The created part is placed on the gameboard but off the map; generally you'll
	want to use some other commands to actually do something with the part.
	Returns the table for the new part. gh_RawCreatePart just returns the userdata.

gh_DeployRandomMecha( team , renown , strength )
	Deploys a number of mecha on the current map. Team is the team they belong
	to. Renown is their difficulty rating, and Strength tells relatively how
	many mecha to generate (in percent).

gh_DrawTerrain( x , y , terrain )
	Changes tile X,Y on the current map to terrain.

gh_GetGearG( gear )
	Returns the G attribute of this gear.
	May also be called as the gear:g() method.

gh_GetGearS( gear )
	Returns the S attribute of this gear.
	May also be called as the gear:s() method.

gh_GetGearV( gear )
	Returns the V attribute of this gear.
	May also be called as the gear:v() method.

gh_GetContext( gear , context_label )
	Generates the context for this gear preceded by the char specified
	in context_label.

gh_GetCurrentScene()
	Returns the table for the scene being played.
	gh_GetCurrentScenePtr returns the scene's userdata.

gh_GetNAtt( gear , NA_G , NA_S )
	Returns the value of gear's numeric attribute NA_G,NA_S.
	May also be called as the gear:getNAtt( NA_G , NA_S ) method.

gh_GetPC()
	Returns the PC's Lua table.
	gh_GetPCPtr() returns the PC's userdata pointer.

gh_GetStat( gear , stat )
	Returns the value of gear's stat. Note that the value can be accessed
	directly through the gear object's gear.stat table.

gh_GetTime()
	Returns the current ComTime. This is the number of game seconds passed
	since the beginning of the campaign.

gh_GiveGear( gear )
	Gives the listed gear to the PC. 

gh_GiveXP( xpv )
	Doles a certain amount of experience to the PC and levels up lancemates.

gh_GotoScene( destination )
	The PC exits the current scene and moves to destination.

gh_InitChatMenu( AddStandardOps )
	Clears all items currently in the menu. If AddStandardOps is true, it
	adds the standard options ([Goodbye], [Join], etc) to the menu.
	*** Restricted: In general, you won't need to use this.

gh_InitMenu()
	Clears the script menu. You should call this before building your menu
	to make sure there aren't any items left over from previous scripts.

gh_IsInPlay( gear )
	Returns true if the gear is on the gameboard, or false otherwise.

gh_MoveAndPacify( GearToMove , Scene )
	Moves the specified gear to the specified scene, setting its team info
	to something peaceful.

gh_OpenShop( wares )
	Opens the shopping interface with a list of wares to stock.

gh_PCMekCanEnterScene( scene )
	Returns true if the PC's mecha can enter the provided scene, or false
	otherwise (or if the PC has no mecha).

gh_Print( message )
	Prints a string to the console area.
	gh_RawPrint( message ) prints a message without formatting.

gh_QueryMenu( message )
	Queries the script menu. Displays message in the text area.

gh_Return()
	The PC exits the current scene and moves upwards to its parent.

gh_SeekGate( scene )
	Changes the entry point when moving to another scene. The gate leading to
	the provided scene will be the one entered from, rather than the gate leading
	to the scene actually being exited. It makes more sense in practice.

gh_SetChatMessage( message )
	Sets the current chat message.
	*** Restricted: In general, you won't need to use this.

gh_SetNAtt( gear , NA_G , NA_S , NA_V )
	Sets the value of gear's numeric attribute NA_G,NA_S to NA_V.
	May also be called as the gear:setNAtt( NA_G , NA_S , NA_V ) method.

gh_SetStat( gear , stat , statvalue )
	Sets the value of gear's stat to statval. Note that this can be done
	directly through the gear object's gear.stat table.

gh_SpendTime( delay )
	Advances the game clock by a specified amount.

gh_StartChat( npc )
	Begins a conversation with that particular NPC.

gh_TrySkillTest( skill , stat , target )
	The PC will make a test using skill+stat against a difficulty of target.
	If this test is failed, additional tests may be taken.

gh_CloneGear( gear )
    Make a duplicate of the gear.

gh_CreatePartMatching( attrs )
    Create a part matching the string attributes in attr. For example,
    gh_CreatePartMatching{DESIG="SAN X-9"} finds a stock Buru Buru and
    returns a clone of it. The first matching part is used.

gh_CreateAndGivePartMatching( attrs )
    Create a part matching the string attributes in attr. and give it to the PC.

gh_StockList( list_number )
    Return the first object in one of the "stock" objects lists; the others
    appear as its siblings. The possible stock object lists are specified by
    LIST_STANDARD for Standard_Equipment_List,
    LIST_ARCHETYPES for Archetypes_List,
    LIST_STC for STC_Item_List, or
    LIST_WMONLIST for WMonList.

siblings( gear )
    A Lua-style iterator to allow looping through the siblings of a gear:
    for s in siblings(gear) do ... end
    The gear itself appears as the first "sibling".

inventory( gear )
    A Lua-style iterator to allow looping through the inventory of a gear.

geartree( gear )
    A Lua-style iterator to allow looping through a gear and all its
    subcomponents, inventory and their subcomponents and inventories et 
    cetera.

*****************************
***   LIST  OF  METHODS   ***
*****************************

gear:GetG()
	Returns the G descriptor of the gear.

gear:GetNAtt( G , S )
	Returns a numeric attribute with descriptors G,S of this gear.

gear:GetS()
	Returns the S descriptor of the gear.

gear:GetV()
	Returns the V descriptor of the gear.

gear:GetX()
	Returns the X position of the gear.

gear:GetY()
	Returns the Y position of the gear.

gear:SetNAtt( G , S , V )
	Sets a numeric attribute with descriptors G,S and value V.

gear:Name()
    Returns the gear's name (as computed by GearName).

gear:Next()
    Returns the gear's first sibling (or nil).

gear:Parent()
    Returns the gear's parent (or nil).

gear:SubCom()
    Returns the gear's first subcomponent (or nil).

gear:InvCom()
    Returns the first item in the gear's inventory (or nil).

gear:GetSAtts()
    Returns a Lua table listing the gear's string attributes as
    key/value pairs. (Keys are forced to upper case.)

gear:SetSAtts(t)
    Replaces all the gear's string attributes with those described
    in the Lua table t. Note that any not appearing in the table are
    removed.

  ==============================
  ===   CHARACTER  METHODS   ===
  ==============================

gear:IsKnown()
	Returns true if the character is known by the PC, or false otherwise.



===

*********************************
***   Using  Gears  in  Lua   ***
*********************************

A gear is a game structure. In Lua all gears are objects with an entry in the
gh[] table. Whenever a gear is referenced in relation to Lua, it's this object
that I'm talking about.

All gear objects contain a pointer to the game structure they're attached to.
In general you should never use this pointer. If you need to record the
identity of a gear (say, to remember which lancemate you promised the cake to)
then you should use the NarrativeID instead.

Given a pointer or a NarrativeID, the gear object can be found in the gh[]
table.

Persistant variables should be stored inside a gear object's v table. The
contents of this table are written to disk when the game is saved; variables
stored elsewhere will be lost between sessions. Legal data types are numbers,
strings, boolean, and tables of those types.





