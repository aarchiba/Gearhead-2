MetaScene 0 2
	name <the # Arena>
	desig <QS_MechaArena>
	ArenaMap
	MapWidth 50
	MapHeight 50
	type <Arena>
	special <SHOWALL SOLO ARENA NOPILLAGE UNCHARTABLE>
	terrain <GROUND>

	lua
		function P.GetArenaState( self )
			-- Used by Arena scenes. This function returns the current arena state.
			return( self:GetNAtt( NAG_ARENADATA , NAS_ARENASTATE ) )
		end
		function P.SetArenaState( self , new_arena_state )
			-- Used by Arena scenes. This function sets the current arena state.
			self:SetNAtt( NAG_ARENADATA , NAS_ARENASTATE , new_arena_state )
		end
		function P.SetArenaRecharge( self , recharge_time )
			-- The recharge timer tells when the next fight can take place at this
			-- arena.
			self:SetNAtt( NAG_ARENADATA , NAS_ARENARECHARGE , gh_GetTime() + recharge_time )
		end
		function P.GetArenaRecharge( self )
			-- The recharge timer tells when the next fight can take place at this
			-- arena.
			return( self:GetNAtt( NAG_ARENADATA , NAS_ARENARECHARGE ) )
		end
		function P.ResetArenaRecharge( self )
			-- This function sets the recharge timer to one day later than the
			-- current time.
			self:SetArenaRecharge( TIME_DAY )
		end
		function P.GetChallenger( self )
			-- If a challenger is assigned to this arena, return its table entry.
			local npc = self:GetNAtt( NAG_ARENADATA , NAS_CHALLENGERID );
			if npc ~= 0 then
				return( gh[ npc ] );
			else
				return( nil );
			end;
		end
		function P.SetChallenger( self , npc )
			if type( npc ) == 'table' then
				self:SetNAtt( NAG_ARENADATA , NAS_CHALLENGERID , npc:GetNAtt( NAG_NARRATIVE , NAS_NID ) );
			elseif type( npc ) == 'number' then
				self:SetNAtt( NAG_ARENADATA , NAS_CHALLENGERID , npc );
			else
				self:SetNAtt( NAG_ARENADATA , NAS_CHALLENGERID , 0 );
			end;
		end
		function P.GetChallengerHome( self )
			-- If a challenger is assigned to this arena, return its home scene.
			local npc = self:GetNAtt( NAG_ARENADATA , NAS_CHALLENGERHOME );
			if npc ~= 0 then
				return( gh[ npc ] );
			else
				return( nil );
			end
		end
		function P.SetChallengerHome( self , npc )
			if type( npc ) == 'table' then
				self:SetNAtt( NAG_ARENADATA , NAS_CHALLENGERHOME , npc:GetNAtt( NAG_NARRATIVE , NAS_NID ) );
			elseif type( npc ) == 'number' then
				self:SetNAtt( NAG_ARENADATA , NAS_CHALLENGERHOME , npc );
			else
				self:SetNAtt( NAG_ARENADATA , NAS_CHALLENGERHOME , 0 );
			end;
		end
		function P.AddArenaWin( self )
			self:AddNAtt( NAG_ARENADATA , NAS_ARENAWINS , 1 );
		end
		function P.GetArenaWins( self )
			return( self:GetNAtt( NAG_ARENADATA , NAS_ARENAWINS ) )
		end
		function P.SetArenaForces( self , forces )
			self:SetNAtt( NAG_ARENADATA , NAS_ARENAFORCES , forces )
		end
		function P.GetArenaForces( self )
			return( self:GetNAtt( NAG_ARENADATA , NAS_ARENAFORCES ) )
		end
		function P.GetArenaThreat( self )
			return( self:GetNAtt( NAG_ARENADATA , NAS_ARENATHREAT ) )
		end
		function P.AddArenaThreat( self , amount )
			self:AddNAtt( NAG_ARENADATA , NAS_ARENATHREAT , amount )
		end
		function P.SetArenaThreat( self , amount )
			self:SetNAtt( NAG_ARENADATA , NAS_ARENATHREAT , amount )
		end
		function P.ResetArena( self )
			-- Get the arena ready for a new battle.
			self:SetNAtt( NAG_ARENADATA , NAS_ARENASTATE , NAV_AS_VACANT )
		end
		function P.PrepArena( self , forces )
			self:SetArenaState( NAV_AS_READY );
			self:SetArenaForces( forces );
		end;

		P.START = function( self )
			-- On startup, if the arena is ready then start the battle.
			-- If no battle is ready then return the PC to the previous scene.
			if self:GetArenaState() == NAV_AS_READY then
				-- A battle is about to start.
				self:SetArenaState( NAV_AS_BATTLE );
				gh_Alert( "You enter the arena. Prepare to battle." );
				self:ResetArenaRecharge();
				if self:GetChallenger() ~= nil then
					-- There's a challenger. Better start a conversation now.
					gh_StartChat( self:GetChallenger() );
				end;

				if ( self:GetArenaForces() > 0 ) then
					gh_DeployRandomMecha( 2 , self:GetArenaThreat() , self:GetArenaForces() )
				end


			elseif self:GetArenaState() == NAV_AS_BATTLE then
				-- We return to a battle in progress, probably from a saved game.
				gh_Print( "The battle rages on." );
			else
				-- No battle going on now. Remove the PC from the arena.
				gh_Print( "You enter the arena. There's no fight going on here now." );
				gh_Return();
			end
		end

		P.NU1 = function( self )
			-- If all player units have left the map, return. Also, probably
			-- lose the battle.
			if gh_CountActiveModels( NAV_DEFPLAYERTEAM ) < 1 then
				gh_Return();
				if self:GetArenaState() == NAV_AS_BATTLE then
					self:SetArenaState( NAV_AS_LOSS );
					gh_Alert( "You have lost the battle." );
					self:EndBattle();
					gh_LoseRenown();
				end
			end
		end

		P.NU2 = function( self )
			-- If all enemy units have left the map, return. Also, probably
			-- win the battle.
			if gh_CountActiveModels( 2 ) < 1 then
				gh_Return();
				if self:GetArenaState() == NAV_AS_BATTLE then
					self:SetArenaState( NAV_AS_WIN );
					self:AddArenaWin();
					gh_Alert( "You have won the battle!" );
					gh_GiveXP( 100 );
					self:AddArenaThreat( math.random( 10 ) )

					if self:GetChallenger() ~= nil then
						-- There's a challenger. Better start a conversation now.
						gh_StartChat( self:GetChallenger() );
					end;

					self:EndBattle();
				end
			end
		end

		P.EndBattle = function( self )
			-- At the end of a battle, whether you've won or lost, the challenger
			-- gets moved back to their home scene.
			local npc = self:GetChallenger();
			if npc ~= nil then
				gh_MoveAndPacify( npc , self:GetChallengerHome() );
				self:SetChallenger( nil );
			end
		end;

	endlua

	sub
		Team 1
		name <Player Team>
		SetEnemy 2
		ParaX 5
		ParaY 25

		Team 2
		name <Enemies>
		faction <PDASS>
		SetEnemy 1
		lua
			P.DEPLOYz = function( self )
				-- Original ArenaScript code (which does the exact same thing):
				--   Deploy <if= SelfArenaState NAV_AS_Ready ifG SelfArenaForces 0 WMecha 2 SelfArenaThreat SelfArenaForces>
				local scene = gh_GetCurrentScene()
				if ( scene ~= nil ) and ( scene:GetArenaState() == NAV_AS_READY ) and ( scene:GetArenaForces() > 0 ) then
					gh_DeployRandomMecha( self:GetS() , scene:GetArenaThreat() , scene:GetArenaForces() )
				end
			end
		endlua
		ParaX 45
		ParaY 25
	end



%%  ********************
%%  ***   DUNGEONS   ***
%%  ********************


MetaScene
	name <# Mine>
	desig <QS_Dungeon_EarthMine>
	type <DUNGEON mine>
	special <NOEXIT>
	terrain <GROUND>
	habitat <EARTH.MNTNS>
	dentrance <*GoDown>
	content1 <Some 1 40 Sub *DUNGEON_THREAT>
	content2 <Some 1 45 Sub *DUNGEON_DECOR>
	content3 <Some 1 30 Sub *DUNGEON_REWARD>
	mapwidth 30
	mapheight 30
	CaveMap
	Ceiling
	RockyTiles

	NeededCells 3

	start <Print 1>
	msg1 <You enter \SCENE SceneID .>

	sub
		Team 1
		SetEnemy 2

		Team 2
		name <Monster>
		type <Mine Cave Earth Animal>
		SetEnemy 1
		Stat 2 1

		room
		width 3
		height 3
		sub
			StairsUp
			Destination -1
		end
	end

